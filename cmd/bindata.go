// Code generated for package cmd by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/index.html
// templates/searchpage.go.html
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templatesIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x5f\x8f\xa3\x36\x10\x7f\xcf\xa7\x98\xf5\xea\x9a\x87\x2b\x38\xc9\xde\x5e\x7b\x84\x70\x0f\xd5\x76\x55\xa9\x95\xfa\x5e\x55\x2b\x83\x0d\x38\x31\x36\x67\x9b\xfc\xb9\xaa\xdf\xbd\x32\x84\xfc\x61\x59\x50\xda\x3e\x1d\x52\x14\x6c\xcf\xcf\x33\xf3\xf3\xcc\x30\x0e\x73\x5b\x88\x68\x32\x09\x73\x46\x68\x34\x01\x00\x08\x05\x97\x1b\xc8\x35\x4b\x57\x28\xb7\xb6\x34\x01\xc6\xa9\x92\xd6\xf8\x99\x52\x99\x60\xa4\xe4\xc6\x4f\x54\x81\x79\xa2\xe4\xe7\x94\x14\x5c\x1c\x56\xbf\x11\xcb\x34\x27\xe2\xfd\x2f\x89\x92\x06\x81\x66\x62\x85\x8c\x3d\x08\x66\x72\xc6\x2c\xba\xdc\xba\xbb\x06\xf6\x50\xb2\x15\xb2\x6c\x6f\x71\x62\x0c\xaa\x45\x9b\xe7\xda\x8a\x84\xca\xb5\xf1\x13\xa1\x2a\x9a\x0a\xa2\x59\x6d\x05\x59\x93\x3d\x16\x3c\x36\xb8\x38\xda\xc0\xbf\x32\x3c\xf3\x3f\xfd\xe0\x3f\xba\xed\x2e\xa7\xfd\x82\x4b\xdf\xa9\x38\x9a\x53\x1b\x11\x9d\xf4\xc5\x8a\x1e\xe0\xaf\x0b\xf5\x00\x94\x9b\x52\x90\x43\x00\xa9\x60\xfb\xe5\xd5\x52\xc1\xa5\x97\x33\x9e\xe5\x36\x80\xf9\x6c\xb6\xcd\xaf\x97\x1d\xc0\xa3\x5c\xb3\xc4\x72\x25\x03\x48\x94\xa8\x0a\x79\x96\xf9\xfb\xf4\x56\x10\x2e\x3b\x6a\x1d\x38\x80\x39\xcc\x80\x54\x56\xf5\x81\x7a\x6c\x8d\x49\xb2\xc9\xb4\xaa\x24\x0d\xe0\x3e\x4d\xd3\x3e\x98\xcf\x65\x59\x59\x2f\xe5\x4c\x50\xa8\xdf\xff\xa8\xd9\xa7\xc4\xb2\x3f\x83\x54\x25\x95\x81\xf7\x20\x48\xcc\xc4\xf7\xa3\x20\x77\x62\x37\x83\x58\x41\xb8\xb8\x19\x55\x12\x63\x76\x4a\xd3\x0e\xb0\xc3\x40\xa2\x84\xd2\x01\xdc\xb3\x4f\x73\xf6\xf1\xe1\x5f\xfa\x7f\x93\xdf\xb7\xf9\x7b\xbb\x9f\x9d\x13\x56\x9a\x32\xed\xc5\xca\x5a\x55\x04\xb0\x28\xf7\x60\x94\xe0\xf4\xb5\xc7\x8d\xf4\xde\x33\x39\xa1\x6a\x17\x80\x54\x92\x75\xf9\x08\xf1\x31\xfe\x43\xdc\x64\xff\x24\x74\x51\x15\x4d\x42\xca\xb7\x90\x08\x62\xcc\x0a\x99\x26\x7e\x51\x14\x62\xca\xb7\xd1\x24\x74\xd1\x7a\x4c\x9f\x84\x49\xcb\xf4\x39\x7f\x86\x70\x7d\x32\x89\x92\x96\x70\xc9\x34\x8a\xae\x0c\xbf\x94\xf9\xea\x51\x56\xda\xdc\x9b\x43\xa6\xd9\x01\x84\xcb\x37\x26\xbd\x0f\xa0\xd5\x0e\x5d\xa1\xea\xa7\xf6\x68\x85\x4e\x69\xcb\xa5\xe0\x92\x79\xb1\x50\xc9\x66\x09\x25\xa1\x94\xcb\x2c\x80\x07\x47\xdd\x87\x1f\xcb\x3d\xcc\x8e\x2f\xcb\x23\xb9\x01\xcc\xcf\xac\x3e\x3d\x3d\x2d\x51\x34\x09\xef\x3c\xef\x95\xaa\x30\x55\xba\x38\x7b\x22\xc0\xcc\x17\x08\x0a\x66\x73\x45\x57\xa8\x54\xc6\x22\x20\x35\x07\x2b\x74\xdf\x71\xb0\xc7\xd1\xa9\x56\xbb\x69\xbf\x54\x57\xf2\xa8\x6c\x48\xfa\x9a\xf3\x9e\xa5\xff\xd1\x9c\xcb\x48\x1e\x37\xad\x46\xd7\x90\x16\xbf\x25\x82\xbb\xf4\x9b\x36\xdf\x81\x69\x9d\x30\x53\x90\xa4\x38\x0f\x38\x6d\x5f\xf1\xc8\xd6\x4d\x59\x48\x95\x6e\x01\xd1\x93\x0b\x52\x38\xa8\x4a\x43\x3d\x13\xe2\x5a\xe6\x1b\x65\xaf\x2d\x20\x2d\x81\xe7\xb1\xe3\xf0\x34\xba\x81\xc6\x13\xe6\x92\xc9\x76\xf2\xbf\x90\x79\xa1\xa8\x49\xdb\x69\x2a\x14\xb1\x01\x68\x97\xe4\xcb\x31\x1a\x48\x4b\x41\xc9\xe5\xc6\x73\x35\x79\xda\xf4\x0b\xd3\xfb\xbb\x69\x14\xc6\xd1\xcf\x4a\x67\xca\xc2\xef\x47\x53\x3f\x87\x38\x8e\x42\x4c\x86\x6c\x1d\x70\x66\xf0\xe8\x63\xfd\x06\xa1\x37\x04\x45\x5c\x59\xab\xe4\xf1\x18\x4d\x15\x17\xdc\xb6\x87\x18\x5b\xf9\x22\x54\xc6\xe5\xb4\x53\x03\x20\xb6\xd2\xfd\x3c\x41\x74\xc6\x60\x47\xb6\xcc\x78\x2c\x4d\x59\x62\x81\x4b\xca\x33\x35\xc2\xe2\xaf\x6e\xd7\x01\x42\x1a\xa3\x06\x19\x79\x3d\xed\x2a\x63\x34\xf1\xbc\x9e\xb5\x8b\xca\xee\x0a\xf8\x28\x69\xc8\x39\xb8\xcb\xb9\x65\x40\x89\xde\x30\xe9\x7d\x6c\xd3\xe4\x0d\x30\x34\xb1\xd1\x74\x8e\x98\x54\x36\xc7\x4d\xdf\x8a\x6b\x06\x51\xfb\x89\x70\x01\xe3\x59\x4d\xa4\x71\xe6\x06\xee\x03\x39\xb0\x63\xd7\x2c\xc1\x52\x3b\x22\x5e\x43\x78\x91\xc1\x8e\x53\x9b\xaf\xd0\xc3\xac\xdc\x23\x20\xc2\xae\xd0\x73\x6d\x10\x7c\xf7\xa5\x52\x76\xf9\xdc\xfc\xb9\xa3\x50\x3d\x5f\xb4\xbe\xc7\xe8\xe4\xdc\x15\x57\xa5\x50\x84\xfa\x3b\xbe\xe1\x05\xa3\x9c\xf8\x4a\x67\xd8\x8d\x4a\x37\xc2\x89\x2a\x0a\x25\x0d\xb6\x79\x55\xc4\xf8\x11\x3f\x3e\xe0\x46\xfd\xcb\xbb\xc5\xe2\xf9\xdd\x62\xf1\xe2\x14\xfb\x66\x9b\xe1\xc7\xf9\xa2\xdc\x7b\x6f\xac\xfa\xa5\xcc\xd0\x58\xd9\x18\x4e\x76\x68\x03\x0e\x76\xdc\xe6\xd0\x28\x1a\x08\xbe\x37\x52\xf5\xcd\xb8\x7b\x35\xdd\xed\x3d\x3a\xc3\x36\x4a\xee\xef\x50\xf4\x93\x66\xc4\x32\x20\x49\xa2\x2a\x69\x4f\xba\x43\xdc\x36\x39\xcd\x70\xa4\xc3\x19\xec\x9c\x70\xd3\x3a\x4d\x42\x93\x68\x5e\xda\xcb\x6b\xcf\x9a\x6c\x49\x33\x8b\xae\x0f\x77\xe4\xca\xb3\xfe\x52\x31\x7d\xc0\x0b\x7f\xe1\xcf\x8f\x83\xfa\x8e\xb3\x36\x4e\x6d\xb3\x63\x34\xa2\x70\xd2\x1b\x55\xb7\xdf\xb5\xd6\xaf\xaf\x5a\x1d\x33\x70\xd3\x5e\xba\x7e\xb3\xbe\x75\xfe\x13\x00\x00\xff\xff\x38\xd2\x49\xf6\x7d\x0e\x00\x00"

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 3709, mode: os.FileMode(436), modTime: time.Unix(1574323770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSearchpageGoHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4f\x6f\xeb\x36\x0c\x3f\x3b\x9f\x82\xd3\xc3\x5e\x5b\x20\x89\x9b\xee\xf5\xe2\x2a\x06\xba\xb6\x0f\x1b\xf6\xa7\x0f\x4b\x2f\xdb\x4d\xb6\x18\x5b\xa8\x2c\x19\x12\xdd\xd4\x2d\xfc\xdd\x07\xd9\x4e\xd2\xf4\xb5\xdd\x65\xf0\xc1\x22\x29\x92\xbf\x1f\x45\x4a\xfc\x87\xeb\xdb\xab\xbb\xbf\xbf\xdd\x40\x49\x95\x4e\x27\x7c\xfb\x43\x21\xd3\x49\xc4\x49\x91\xc6\x74\x83\x59\xd1\x28\x1e\x0f\xd2\x24\xe2\x3e\x77\xaa\xa6\x74\x12\x45\xeb\xc6\xe4\xa4\xac\x01\x69\xaf\x34\x0a\x77\x7c\x02\xcf\x93\x28\x8a\xa4\xcd\x9b\x0a\x0d\xcd\x0b\xa4\x1b\x8d\x61\xf9\x73\xfb\xab\x3c\x3e\xba\xc7\x76\x63\x9d\x3c\x3a\x99\x3f\x08\xdd\x20\x2c\xe1\xe8\x68\x12\x45\xdd\x1b\xb1\xee\x54\x85\xff\x19\x8f\x9e\x5e\x86\xba\xbc\x59\xdd\x1d\x7d\xb8\x5f\x36\x4e\x84\x24\x2f\xbd\x16\xe7\xd5\x88\x81\xc7\x3b\x6a\xdc\x53\xdb\xb3\x05\xf8\x94\x37\x9e\x6c\x85\xce\xf7\x60\xd6\xd6\xd0\x6c\x2d\x2a\xa5\xdb\x04\xd8\x9d\xc3\xac\xc9\x4b\x24\xf8\x63\xc5\xa6\x70\xe9\x94\xd0\x53\xf8\x05\xf5\x03\x92\xca\xc5\x14\xbc\x30\x7e\xe6\xd1\xa9\xf5\xc5\x24\x8a\x32\xeb\x24\xba\x59\x6e\xb5\x16\xb5\xc7\x04\xb6\xab\x60\xdc\x28\x49\x65\x02\x8b\xd3\xd3\x1f\x83\x48\x22\xd3\x38\xd3\xa2\xb5\x0d\x25\xb0\x56\x8f\x28\x2f\x02\x9e\x6e\xf2\x0a\x15\xc9\xe9\x81\x58\xf6\x38\x87\x54\x09\x2c\xea\x47\xf0\x56\x2b\x09\x9f\xa4\x0c\x11\xa2\x5a\x48\xa9\x4c\x91\xc0\x97\xfa\xb1\xcf\x6b\x9d\x9c\x6d\x9c\xa8\x13\xc8\x1c\x8a\xfb\x59\x50\xbc\x93\xca\x25\x86\xca\x59\x5e\x2a\x2d\x8f\xf1\x01\xcd\xc9\x73\x26\xf2\xfb\xc2\xd9\xc6\xc8\x40\xcb\xba\x04\x3e\xad\xcf\xc2\x77\xf1\x96\x77\x69\x1f\xd0\xc1\x5b\x4e\x01\xdc\xf7\x1e\x03\x97\x11\xf1\x8c\x6c\x9d\xc0\xe2\x6c\x80\xbd\x55\x66\x96\xc8\x56\x7b\x3d\xe1\x23\xcd\x84\x56\x85\x49\x40\xe3\x9a\xfa\xba\x7f\x9f\xef\xcb\xd5\xe5\xd7\xf3\xd3\x60\x1c\x35\x9b\x52\x11\xee\x68\xf3\x78\xec\x00\x1e\x0f\xe3\xc0\x33\x2b\xdb\x74\x02\x00\xc0\xcb\x45\xba\x42\xe1\xf2\x12\x7e\xb7\x05\x8f\xcb\xc5\xa8\x5f\x5b\x57\x81\xe8\xdb\x78\xc9\x62\xdf\x6f\xd1\xb6\x60\x50\x21\x95\x56\x2e\xd9\xb7\xdb\xd5\x1d\x1b\x36\xf7\x0e\xfd\x19\xef\xe5\x41\xe7\x0e\x15\x83\x52\xa6\x5c\x8b\x0c\x35\xac\xad\x5b\xb2\x71\x8e\x58\xfa\xdb\xb0\x48\x80\xc7\xbd\x39\xe5\x31\x85\xd9\x8d\xa2\xa8\xf7\x51\xa6\x6e\x08\x8c\xa8\x70\xef\x04\x4a\xbe\x10\xa8\xad\x71\xc9\x42\xd1\x18\xf4\x33\xb1\x64\xcf\xcf\x30\x1f\xed\xd0\x75\x0c\xfa\xc9\xdf\xb9\x00\x59\x18\xa8\x4d\xa1\x31\x12\x9d\x27\x61\x24\x7c\xde\xeb\x61\xa3\xa8\x84\xcb\x3f\xaf\x41\xdb\x42\xe5\x73\x16\xbf\x0d\x6b\x48\x9d\x97\x98\xdf\x67\xf6\x91\x8d\x30\xbd\x75\xd4\xf7\xee\x0e\xcf\xf5\xcd\xea\x8a\x41\x40\xb5\xb3\x41\xd7\xa5\x2b\xeb\x08\xae\xd1\xe7\x68\x42\x23\x7c\xc0\x7c\x3b\xf6\x03\xf5\xbd\xf4\x0e\xf7\xed\x86\x97\xe4\xc3\x75\x04\x4e\x98\x02\xa7\x80\xc5\x1c\x16\xe7\x55\x38\x0a\x58\x9c\x43\xa5\x4c\x43\xe8\x41\x14\x76\x0e\xb7\x0e\xa4\x8c\xab\x2a\x6e\xdb\xb6\x85\xb2\x4c\xaa\x2a\xf1\x1e\x66\x6f\x69\xdf\xab\xcb\x00\x9a\x9e\x06\xb8\xe1\xff\x0e\x50\x7a\x7a\x0d\xf1\x1f\x6b\x70\x17\xf6\xa0\x83\xe2\xd7\x7d\xd5\x37\xda\x98\x39\xdc\x43\xbe\x16\x66\xc9\xce\x18\xf4\xb3\xb3\x64\x39\x1a\x42\xc7\x86\x3d\xd1\xc1\x91\x65\x0d\x51\xa8\xdf\x08\xc5\xa1\x47\x62\x60\x4d\xae\x55\x7e\xbf\x64\xbb\xd7\xe0\x82\xa5\x9f\x4d\xe6\xeb\x83\x10\xe3\x29\x37\x59\xa5\x68\xcb\x6c\x2b\x8d\x01\x47\x71\x84\xf7\xb2\x44\x7b\xa0\x3f\xfd\x7f\x40\x87\xa7\xe6\x00\xec\x47\x05\x0c\xc6\x61\x6e\x23\x1e\x87\x91\x0f\x8b\xd2\xc5\xfd\xef\x2c\xfd\x0b\x7d\xa3\x29\xe1\x71\x79\x16\x34\x75\xfa\x35\xdc\x3b\x7d\xfb\xe6\xb6\x31\x04\x5d\x07\x0e\x73\xeb\xa4\xe7\x71\x3d\x84\x0c\x46\xdb\x50\x00\xde\x75\x13\x1e\x0f\x77\x0d\x8f\xfb\x07\xf9\xdf\x00\x00\x00\xff\xff\x6c\xd8\xdf\xc1\xa7\x07\x00\x00"

func templatesSearchpageGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSearchpageGoHtml,
		"templates/searchpage.go.html",
	)
}

func templatesSearchpageGoHtml() (*asset, error) {
	bytes, err := templatesSearchpageGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/searchpage.go.html", size: 1959, mode: os.FileMode(436), modTime: time.Unix(1574381582, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html":         templatesIndexHtml,
	"templates/searchpage.go.html": templatesSearchpageGoHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html":         &bintree{templatesIndexHtml, map[string]*bintree{}},
		"searchpage.go.html": &bintree{templatesSearchpageGoHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
